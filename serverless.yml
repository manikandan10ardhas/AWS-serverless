# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: awsserverless
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  profile: manikandan55
  environment:
    tableName: ${self:custom.tableName}
    bucketName: ${self:custom.bucketName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:*
        - s3:*
      Resource: '*'

plugins:
  - serverless-s3-sync
  - serverless-webpack

package:
  individually: true

custom:
  tableName: users-table
  bucketName: myserverlesss3bucket-1055
  s3Sync:
    - bucketName: ${self:custom.bucketName}
      localDir: uploadData


functions:
  hello:
    handler: handler.hello
  
  getUser: 
    handler: lambdas/endpoint/getUser.handler
    events:
      - http:
          path: get-user/{ID}
          method: GET
          cors: true
  getPlayerScore:
    handler: lambdas/endpoint/getPlayerScore.handler
    events:
      - http:
          path: get-player-score/{ID}
          method: GET
          cors: true
  createPlayerScore:
    handler: lambdas/endpoint/createUser.handler
    events:
      - http:
          path: create-user/{ID}
          method: POST
          cors: true
  createFile:
    handler: lambdas/endpoint/createFile.handler
    events:
      - http:
          path: create-file/{fileName}
          method: POST
          cors: true
  getFileName:
    handler: lambdas/endpoint/getFile.handler
    events:
      - http:
          path: get-file/{fileName}
          method: GET
          cors: true

resources:
  Resources:
    DemoBucketUpload:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
